package base;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.Duration;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;

import commonUtil.PropertyReader;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;

/* This class is used for WebDriver
 * initialization
 */
public class TestBase {

	public WebDriver driver;
	public Properties prop;
	public String url;
	public WebDriverWait wait;
	public String browserName;
	Logger logger;
	public Wait<WebDriver> fluentWait;

	/*
	 * Initialize the web Driver.
	 * 
	 * @return webDriver
	 */
	public WebDriver DriverInitializer() throws IOException {

		try {
			logger = Logger.getLogger(this.getClass());
			logger.debug("START: DriverInitializer");
			browserName = PropertyReader.getBrowserName();
			logger.info("Browser Name is " + browserName);
			System.out.println(browserName);
			logger.debug("Checking which browser need to be invoked");
			if (browserName.equals("chrome")) {
				System.setProperty("webdriver.chrome.driver",
						System.getProperty("user.dir") + PropertyReader.getChromePath());
				driver = new ChromeDriver();
			} else if (browserName.equals("firefox")) {
				System.setProperty("webdriver.gecko.driver",
						System.getProperty("user.dir") + PropertyReader.getFirefoxPath());
				driver = new FirefoxDriver();
			}

			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
			logger.debug("Creating web Driver wait.");
			 fluentWait = new FluentWait<WebDriver>(driver)
					.withTimeout(Duration.ofSeconds(30))
					.pollingEvery(Duration.ofSeconds(3))
					.ignoring(Exception.class);

		} catch (Exception e) {
			logger.fatal("Exception Occured" + e.getMessage() + e.getStackTrace());
		} finally {
			logger.debug("END: DriverInitializer");
		}
		return driver;
	}

	
}
