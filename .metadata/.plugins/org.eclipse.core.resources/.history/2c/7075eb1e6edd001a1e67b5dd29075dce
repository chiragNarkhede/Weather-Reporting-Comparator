package testSuit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.AfterTest;
import org.testng.annotations.Test;
import org.testng.Assert;
import base.TestBase;
import pageObjects.LandingPage;
import pageObjects.WeatherReportPage;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import commonUtil.ApiOps;
import commonUtil.PropertyReader;
import commonUtil.ScreenShotUtil;
import commonUtil.UiOps;
import model.WeatherReportResponse;


/* Verify City on Map.
 */
public class VerifyCityTemperatureWithAPIandUI extends TestBase {

	private static Logger log = LogManager.getLogger(VerifyCityTemperatureWithAPIandUI.class);
	public WebDriver driver;
	boolean setupResult = true;
	
	public String city;
	LandingPage landingPage;
	WeatherReportPage reportPage;
	WebDriverWait wait;
	Wait<WebDriver> fluentWait;
	
	public String degreeTemp;
	WeatherReportResponse reportResponse;
	@BeforeTest
	public void Setup() {

		log.debug("Start Setup: VerifyCityTemperatureWithAPIandUI");
		log.info("Start Setup: VerifyCityTemperatureWithAPIandUI");
		try {

			PropertyReader.ReadFile();
			reportResponse = ApiOps.GetResponse();
			city = PropertyReader.getCity();
			log.debug("Initialize Web Driver");
			driver = DriverInitializer();
			driver.get(PropertyReader.getUrl());
			driver.manage().window().maximize();
			wait = new WebDriverWait(driver, 30);

			log.debug("Initialising Object of Landing Page.");
			landingPage = PageFactory.initElements(driver, LandingPage.class);
			ScreenShotUtil.CaptureScreenShot(driver, true);
			String title = driver.getTitle();
			log.debug("Getting title of Landing Page." + title);
			if (!title.contains("NDTV")) {
				log.fatal("Title is not matching." + title);
				ScreenShotUtil.CaptureScreenShot(driver, false);
				setupResult = false;
			}

			Thread.sleep(500);
			
			if(TestBase.IsAlertPresent(driver,wait))
			{
				driver.switchTo().alert().dismiss();
				ScreenShotUtil.CaptureScreenShot(driver, true);
				
			}else
			{
				/* Sometimes Alert is not displaying */
				driver.navigate().refresh();
			}
			

			reportPage = PageFactory.initElements(driver, WeatherReportPage.class);
			if (landingPage.getSubMenu().isDisplayed()) {
				landingPage.getSubMenu().click();
			}
			ScreenShotUtil.CaptureScreenShot(driver, true);
			landingPage.getWeatherOption().click();
			ScreenShotUtil.CaptureScreenShot(driver, true);
			
			if (!driver.getTitle().contains("WEATHER")) {
				setupResult = false;
				ScreenShotUtil.CaptureScreenShot(driver, false);
			}
			ScreenShotUtil.CaptureScreenShot(driver, true);
			
		} catch (Exception e) {
			log.fatal("Exception Occured" + e.getMessage().toString() + e.getStackTrace().toString());

		} finally {
			log.debug("End Setup: VerifyCityTemperatureWithAPIandUI");
		}

	}

	@Test()
	public void Test() {

		boolean expected = true;
		try {
			/*
			 * Step 1
			 */
			wait.until(ExpectedConditions.visibilityOf(reportPage.getSearchContainerTitle()));
			String selectCityContainer = reportPage.getSearchContainerTitle().getText();
			ScreenShotUtil.CaptureScreenShot(driver, true);
	
			/*
			 * Step 2
			 */
			Thread.sleep(250);
			log.debug("Enter City into search box as" + city);
			reportPage.getSearchBox().sendKeys(city);
			ScreenShotUtil.CaptureScreenShot(driver, true);
			wait.until(ExpectedConditions.visibilityOf(reportPage.getSearchBox()));
			reportPage.getSearchBox().sendKeys(Keys.ENTER);
			reportPage.getCheckBox(city).click();
			ScreenShotUtil.CaptureScreenShot(driver, true);
			Assert.assertEquals(selectCityContainer.contains("Pin your City"),expected,"Container is not present");

			/*
			 * Step 3
			 */
			log.debug("Verify that Selected City is displayed on Map.");
			boolean cityOnMap = reportPage.getCityOnMap(city).isDisplayed();
			ScreenShotUtil.CaptureScreenShot(driver, true);
			Assert.assertEquals(cityOnMap,expected,"Selected City is not displayed on Map");
			/*
			 * Step 4
			 */

			log.debug("Verify that Temperature is displayed on city");
			boolean tempPresent = reportPage.getDTemperature(city).isDisplayed();
			tempPresent &= reportPage.getFTemperature(city).isDisplayed();
			ScreenShotUtil.CaptureScreenShot(driver, true);
			Assert.assertEquals(tempPresent,expected,"Temperature for city is not dispayed.");
			/*
			 * Step 5 ,6,7
			 */
			log.debug("Verify Temperature form city container with popup temperature.");
			degreeTemp = reportPage.getDTemperature(city).getText();
			log.debug("Verify that after clicking on city popup displayed.");
			reportPage.getCityOnMap(city).click();
			wait.until(ExpectedConditions.visibilityOf(reportPage.getLeafPopUp()));
			boolean popUpDisplayed = reportPage.getLeafPopUp().isDisplayed();
			ScreenShotUtil.CaptureScreenShot(driver, true);
			Assert.assertEquals(popUpDisplayed,expected,"After clicking on city popup is not displayed.");
			
			
			/*
			 * Step 8
			 */
			log.debug("Verify Temperature from API and UI");
			boolean apiMatchUi = UiOps.checkTemp(degreeTemp.substring(0, 2),reportResponse);
			Assert.assertEquals(apiMatchUi,expected," Temperature from API and UI not matched");
			
			

		} catch (Exception e) {
			log.fatal("Exception Occured" + e.getMessage().toString() + e.getStackTrace().toString());

		} finally {
			log.debug("END: Test");

		}
	}

	@AfterTest
	public void CleanUp() {
		driver.quit();
	}

}